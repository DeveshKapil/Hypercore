{"$message_type":"diagnostic","message":"found duplicate lang item `panic_impl`","code":{"code":"E0152","explanation":"A lang item was redefined.\n\nErroneous code example:\n\n```compile_fail,E0152\n#![feature(lang_items)]\n\n#[lang = \"owned_box\"]\nstruct Foo<T>(T); // error: duplicate lang item found: `owned_box`\n```\n\nLang items are already implemented in the standard library. Unless you are\nwriting a free-standing application (e.g., a kernel), you do not need to provide\nthem yourself.\n\nYou can build a free-standing crate by adding `#![no_std]` to the crate\nattributes:\n\n```ignore (only-for-syntax-highlight)\n#![no_std]\n```\n\nSee also [this section of the Rustonomicon][beneath std].\n\n[beneath std]: https://doc.rust-lang.org/nomicon/beneath-std.html\n"},"level":"error","spans":[{"file_name":"/home/dev/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uefi-services-0.22.0/src/lib.rs","byte_start":6225,"byte_end":8509,"line_start":200,"line_end":257,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"fn panic_handler(info: &core::panic::PanicInfo) -> ! {","highlight_start":1,"highlight_end":55},{"text":"    println!(\"[PANIC]: {}\", info);","highlight_start":1,"highlight_end":35},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Give the user some time to read the message","highlight_start":1,"highlight_end":51},{"text":"    if let Some(st) = unsafe { SYSTEM_TABLE.as_ref() } {","highlight_start":1,"highlight_end":57},{"text":"        st.boot_services().stall(10_000_000);","highlight_start":1,"highlight_end":46},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        let mut dummy = 0u64;","highlight_start":1,"highlight_end":30},{"text":"        // FIXME: May need different counter values in debug & release builds","highlight_start":1,"highlight_end":78},{"text":"        for i in 0..300_000_000 {","highlight_start":1,"highlight_end":34},{"text":"            unsafe {","highlight_start":1,"highlight_end":21},{"text":"                core::ptr::write_volatile(&mut dummy, i);","highlight_start":1,"highlight_end":58},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    cfg_if! {","highlight_start":1,"highlight_end":14},{"text":"        if #[cfg(all(target_arch = \"x86_64\", feature = \"qemu\"))] {","highlight_start":1,"highlight_end":67},{"text":"            // If running in QEMU, use the f4 exit port to signal the error and exit","highlight_start":1,"highlight_end":85},{"text":"            use qemu_exit::QEMUExit;","highlight_start":1,"highlight_end":37},{"text":"            let custom_exit_success = 3;","highlight_start":1,"highlight_end":41},{"text":"            let qemu_exit_handle = qemu_exit::X86::new(0xF4, custom_exit_success);","highlight_start":1,"highlight_end":83},{"text":"            qemu_exit_handle.exit_failure();","highlight_start":1,"highlight_end":45},{"text":"        } else {","highlight_start":1,"highlight_end":17},{"text":"            // If the system table is available, use UEFI's standard shutdown mechanism","highlight_start":1,"highlight_end":88},{"text":"            if let Some(st) = unsafe { SYSTEM_TABLE.as_ref() } {","highlight_start":1,"highlight_end":65},{"text":"                use uefi::table::runtime::ResetType;","highlight_start":1,"highlight_end":53},{"text":"                st.runtime_services()","highlight_start":1,"highlight_end":38},{"text":"                    .reset(ResetType::SHUTDOWN, uefi::Status::ABORTED, None);","highlight_start":1,"highlight_end":78},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            // If we don't have any shutdown mechanism handy, the best we can do is loop","highlight_start":1,"highlight_end":89},{"text":"            log::error!(\"Could not shut down, please power off the system manually...\");","highlight_start":1,"highlight_end":89},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            cfg_if! {","highlight_start":1,"highlight_end":22},{"text":"                if #[cfg(target_arch = \"x86_64\")] {","highlight_start":1,"highlight_end":52},{"text":"                    loop {","highlight_start":1,"highlight_end":27},{"text":"                        unsafe {","highlight_start":1,"highlight_end":33},{"text":"                            // Try to at least keep CPU from running at 100%","highlight_start":1,"highlight_end":77},{"text":"                            core::arch::asm!(\"hlt\", options(nomem, nostack));","highlight_start":1,"highlight_end":78},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else if #[cfg(target_arch = \"aarch64\")] {","highlight_start":1,"highlight_end":60},{"text":"                    loop {","highlight_start":1,"highlight_end":27},{"text":"                        unsafe {","highlight_start":1,"highlight_end":33},{"text":"                            // Try to at least keep CPU from running at 100%","highlight_start":1,"highlight_end":77},{"text":"                            core::arch::asm!(\"hlt 420\", options(nomem, nostack));","highlight_start":1,"highlight_end":82},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    loop {","highlight_start":1,"highlight_end":27},{"text":"                        // just run forever dammit how do you return never anyway","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the lang item is first defined in crate `std` (which `bitflags` depends on)","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"first definition in `std` loaded from /home/dev/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-309988280bc3839e.rlib","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"second definition in the local crate (`uefi_services`)","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0152]\u001b[0m\u001b[0m\u001b[1m: found duplicate lang item `panic_impl`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/dev/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/uefi-services-0.22.0/src/lib.rs:200:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn panic_handler(info: &core::panic::PanicInfo) -> ! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    println!(\"[PANIC]: {}\", info);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m257\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the lang item is first defined in crate `std` (which `bitflags` depends on)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: first definition in `std` loaded from /home/dev/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-309988280bc3839e.rlib\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: second definition in the local crate (`uefi_services`)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0152`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0152`.\u001b[0m\n"}
